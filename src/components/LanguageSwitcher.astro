---
// Language Switcher Component
import { getCollection } from "astro:content";
import { getAvailableLanguages } from "../utils/content.js";

export interface Props {
    currentLanguage?: string;
    className?: string;
    currentPath?: string; // Add current path to determine URL structure
}

const {
    currentLanguage = "en",
    className = "",
    currentPath = "",
} = Astro.props;

// Get available languages from content collections
let languages: any[] = [];
try {
    const languagesCollection = await getCollection("languages");
    const allLanguages = getAvailableLanguages(languagesCollection);

    // Deduplicate languages by code (keep only the first occurrence of each language code)
    const uniqueLanguages = allLanguages.filter(
        (lang, index, array) =>
            array.findIndex((l) => l.code === lang.code) === index,
    );

    languages = uniqueLanguages;
} catch (error) {
    console.warn("Could not load languages:", error);
    languages = [{ code: "en", name: "English", flag: "ðŸ‡ºðŸ‡¸" }];
}

// Determine display name for current language
const currentLangData = languages.find((lang) => lang.code === currentLanguage);
const displayName = currentLangData?.name || "Language";

// Function to generate language-aware URLs
function generateLanguageUrl(
    targetLangCode: string,
    currentPath: string,
): string {
    // Remove leading slash for processing
    const path = currentPath.startsWith("/")
        ? currentPath.substring(1)
        : currentPath;

    // Split path into segments
    const segments = path.split("/").filter((segment) => segment.length > 0);

    if (segments.length === 0) {
        // Root path, just return language code
        return `/${targetLangCode}`;
    }

    const supportedLanguages = ["en", "de", "it"];

    // Check different URL patterns
    if (segments.length === 1) {
        // Pattern: /en or /de or /page
        if (supportedLanguages.includes(segments[0])) {
            // It's a language code, replace it
            return `/${targetLangCode}`;
        } else {
            // It's a page, append language
            return `/${segments[0]}/${targetLangCode}`;
        }
    } else if (segments.length >= 2) {
        // Pattern: /page/en or /en/page or more complex

        // Check if first segment is a language code
        if (supportedLanguages.includes(segments[0])) {
            // Pattern: /en/page/... - replace first segment
            segments[0] = targetLangCode;
        } else if (supportedLanguages.includes(segments[1])) {
            // Pattern: /page/en/... - replace second segment
            segments[1] = targetLangCode;
        } else {
            // No language code found, check if it's a known page pattern
            const knownPages = ["elysia", "wfm", "b2b", "courses"];
            if (knownPages.includes(segments[0])) {
                // Pattern: /page/... - append language as second segment
                segments.splice(1, 0, targetLangCode);
            } else {
                // Default: prepend language code
                segments.unshift(targetLangCode);
            }
        }
    }

    return "/" + segments.join("/");
}
---

<div class={`language-switcher ${className}`}>
    <div class="relative inline-block text-left">
        <div>
            <button
                type="button"
                class="inline-flex items-center justify-center px-3 py-2 text-white hover:underline whitespace-nowrap focus:outline-none"
                id="language-menu-button"
                aria-expanded="true"
                aria-haspopup="true"
            >
                <i class="material-icons text-base leading-none mr-2"
                    >language</i
                >
                <span id="language-display">{displayName}</span>
                <svg
                    class="ml-1 h-4 w-4"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    aria-hidden="true"
                >
                    <path
                        fill-rule="evenodd"
                        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                        clip-rule="evenodd"></path>
                </svg>
            </button>
        </div>

        <div
            class="language-dropdown origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-slate-800 ring-1 ring-slate-600 focus:outline-none hidden"
            role="menu"
            aria-orientation="vertical"
            aria-labelledby="language-menu-button"
            tabindex="-1"
        >
            <div class="py-1" role="none">
                {
                    languages.map((language) => {
                        return (
                            <button
                                onclick={`setUserLanguage('${language.code}')`}
                                class={`w-full text-left flex items-center px-4 py-2 text-sm hover:bg-slate-700 transition-colors ${
                                    currentLanguage === language.code
                                        ? "bg-slate-700 text-blue-400"
                                        : "text-gray-200 hover:text-white"
                                }`}
                                role="menuitem"
                                tabindex="-1"
                            >
                                <span class="mr-3 text-lg">
                                    {language.flag}
                                </span>
                                {language.name}
                                {currentLanguage === language.code && (
                                    <svg
                                        class="ml-auto h-4 w-4 text-blue-400"
                                        xmlns="http://www.w3.org/2000/svg"
                                        viewBox="0 0 20 20"
                                        fill="currentColor"
                                    >
                                        <path
                                            fill-rule="evenodd"
                                            d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                            clip-rule="evenodd"
                                        />
                                    </svg>
                                )}
                            </button>
                        );
                    })
                }

                <hr class="border-slate-600 my-1" />

                <!-- System Configuration Option -->
                <button
                    class="w-full text-left flex items-center px-4 py-2 text-sm hover:bg-slate-700 transition-colors text-gray-200 hover:text-white"
                    role="menuitem"
                    tabindex="-1"
                    onclick="setSystemLanguage()"
                >
                    <i class="material-icons text-base mr-3">settings</i>
                    System Configuration
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    // Dynamic URL generation function
    function generateLanguageUrl(targetLangCode, currentPath) {
        // Remove leading slash for processing
        const path = currentPath.startsWith("/")
            ? currentPath.substring(1)
            : currentPath;

        // Split path into segments
        const segments = path
            .split("/")
            .filter((segment) => segment.length > 0);

        if (segments.length === 0) {
            // Root path, just return language code
            return `/${targetLangCode}`;
        }

        const supportedLanguages = ["en", "de", "it"];

        // Check different URL patterns
        if (segments.length === 1) {
            // Pattern: /en or /de or /page
            if (supportedLanguages.includes(segments[0])) {
                // It's a language code, replace it
                return `/${targetLangCode}`;
            } else {
                // It's a page, append language
                return `/${segments[0]}/${targetLangCode}`;
            }
        } else if (segments.length >= 2) {
            // Pattern: /page/en or /en/page or more complex

            // Check if first segment is a language code
            if (supportedLanguages.includes(segments[0])) {
                // Pattern: /en/page/... - replace first segment
                segments[0] = targetLangCode;
            } else if (supportedLanguages.includes(segments[1])) {
                // Pattern: /page/en/... - replace second segment
                segments[1] = targetLangCode;
            } else {
                // No language code found, check if it's a known page pattern
                const knownPages = ["elysia", "wfm", "b2b", "courses"];
                if (knownPages.includes(segments[0])) {
                    // Pattern: /page/... - append language as second segment
                    segments.splice(1, 0, targetLangCode);
                } else {
                    // Default: prepend language code
                    segments.unshift(targetLangCode);
                }
            }
        }

        return "/" + segments.join("/");
    }

    // Language preference management
    function setUserLanguage(langCode) {
        localStorage.setItem("userLanguagePreference", langCode);
        // Generate dynamic URL preserving current page structure
        const targetUrl = generateLanguageUrl(
            langCode,
            window.location.pathname,
        );
        window.location.href = targetUrl;
    }

    function setSystemLanguage() {
        localStorage.removeItem("userLanguagePreference");
        // Close the dropdown
        const dropdown = document.querySelector(".language-dropdown");
        if (dropdown) {
            dropdown.classList.add("hidden");
        }
        // Detect browser language and redirect
        const browserLang = getBrowserLanguage();
        const targetUrl = generateLanguageUrl(
            browserLang,
            window.location.pathname,
        );
        window.location.href = targetUrl;
    }

    function getBrowserLanguage() {
        const supportedLanguages = ["en", "de", "it"];
        const browserLang = navigator.language || navigator.languages[0];
        const langCode = browserLang.split("-")[0].toLowerCase();
        return supportedLanguages.includes(langCode) ? langCode : "en";
    }

    // Toggle dropdown functionality
    document.addEventListener("DOMContentLoaded", function () {
        const button = document.getElementById("language-menu-button");
        const dropdown = document.querySelector(".language-dropdown");
        const languageDisplay = document.getElementById("language-display");

        // Update display based on current URL and user preference
        function updateLanguageDisplay() {
            if (!languageDisplay) return; // Guard clause for null check

            const userPreference = localStorage.getItem(
                "userLanguagePreference",
            );

            // Get current language from URL
            const currentLang = getCurrentLanguageFromUrl();

            if (userPreference) {
                // User has a preference, show the preferred language name
                const langMap = {
                    en: "English",
                    de: "Deutsch",
                    it: "Italiano",
                };
                languageDisplay.textContent =
                    langMap[userPreference] || userPreference;
            } else if (currentLang && currentLang !== "auto") {
                // No user preference but we can detect language from URL
                const langMap = {
                    en: "English",
                    de: "Deutsch",
                    it: "Italiano",
                };
                languageDisplay.textContent =
                    langMap[currentLang] || currentLang;
            } else {
                // Show "System" when using auto-detection and no clear language in URL
                languageDisplay.textContent = "System";
            }
        }

        // Function to detect current language from URL
        function getCurrentLanguageFromUrl() {
            const path = window.location.pathname.startsWith("/")
                ? window.location.pathname.substring(1)
                : window.location.pathname;

            const segments = path
                .split("/")
                .filter((segment) => segment.length > 0);
            const supportedLanguages = ["en", "de", "it"];

            if (segments.length === 0) {
                return "en"; // Default to English for root
            }

            // Check if first segment is a language
            if (supportedLanguages.includes(segments[0])) {
                return segments[0];
            }

            // Check if second segment is a language (for /page/lang patterns)
            if (
                segments.length >= 2 &&
                supportedLanguages.includes(segments[1])
            ) {
                return segments[1];
            }

            return "en"; // Default fallback
        }

        // Initial update
        updateLanguageDisplay();

        if (button && dropdown) {
            button.addEventListener("click", function () {
                dropdown.classList.toggle("hidden");
            });

            // Close dropdown when clicking outside
            document.addEventListener("click", function (event) {
                const target = event.target as Element;
                if (!button.contains(target) && !dropdown.contains(target)) {
                    dropdown.classList.add("hidden");
                }
            });
        }
    });

    // Make functions globally available
    (window as any).generateLanguageUrl = generateLanguageUrl;
    (window as any).setUserLanguage = setUserLanguage;
    (window as any).setSystemLanguage = setSystemLanguage;
    (window as any).getBrowserLanguage = getBrowserLanguage;
</script>

<style>
    .language-switcher {
        z-index: 50;
    }
</style>
