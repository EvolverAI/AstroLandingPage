---
// Language Switcher Component
import { getCollection } from "astro:content";
import { getAvailableLanguages } from "../utils/content.js";

export interface Props {
    currentLanguage?: string;
    className?: string;
}

const { currentLanguage = "en", className = "" } = Astro.props;

// Get available languages from content collections
let languages: any[] = [];
try {
    const languagesCollection = await getCollection("languages");
    languages = getAvailableLanguages(languagesCollection);
} catch (error) {
    console.warn("Could not load languages:", error);
    languages = [{ code: "en", name: "English", flag: "ðŸ‡ºðŸ‡¸" }];
}

// Determine display name for current language
const currentLangData = languages.find((lang) => lang.code === currentLanguage);
const displayName = currentLangData?.name || "Language";
---

<div class={`language-switcher ${className}`}>
    <div class="relative inline-block text-left">
        <div>
            <button
                type="button"
                class="inline-flex items-center justify-center px-3 py-2 text-white hover:underline whitespace-nowrap focus:outline-none"
                id="language-menu-button"
                aria-expanded="true"
                aria-haspopup="true"
            >
                <i class="material-icons text-base leading-none mr-2"
                    >language</i
                >
                <span id="language-display">{displayName}</span>
                <svg
                    class="ml-1 h-4 w-4"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    aria-hidden="true"
                >
                    <path
                        fill-rule="evenodd"
                        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                        clip-rule="evenodd"></path>
                </svg>
            </button>
        </div>

        <div
            class="language-dropdown origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-slate-800 ring-1 ring-slate-600 focus:outline-none hidden"
            role="menu"
            aria-orientation="vertical"
            aria-labelledby="language-menu-button"
            tabindex="-1"
        >
            <div class="py-1" role="none">
                {
                    languages.map((language) => {
                        const href = `/${language.code}`; // Always use /langcode format
                        return (
                            <a
                                href={href}
                                class={`flex items-center px-4 py-2 text-sm hover:bg-slate-700 transition-colors ${
                                    currentLanguage === language.code
                                        ? "bg-slate-700 text-blue-400"
                                        : "text-gray-200 hover:text-white"
                                }`}
                                role="menuitem"
                                tabindex="-1"
                                onclick={`event.preventDefault(); setUserLanguage('${language.code}');`}
                            >
                                <span class="mr-3 text-lg">
                                    {language.flag}
                                </span>
                                {language.name}
                                {currentLanguage === language.code && (
                                    <svg
                                        class="ml-auto h-4 w-4 text-blue-400"
                                        xmlns="http://www.w3.org/2000/svg"
                                        viewBox="0 0 20 20"
                                        fill="currentColor"
                                    >
                                        <path
                                            fill-rule="evenodd"
                                            d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                                            clip-rule="evenodd"
                                        />
                                    </svg>
                                )}
                            </a>
                        );
                    })
                }

                <hr class="border-slate-600 my-1" />

                <!-- System Configuration Option -->
                <button
                    class="w-full text-left flex items-center px-4 py-2 text-sm hover:bg-slate-700 transition-colors text-gray-200 hover:text-white"
                    role="menuitem"
                    tabindex="-1"
                    onclick="setSystemLanguage()"
                >
                    <i class="material-icons text-base mr-3">settings</i>
                    System Configuration
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    // Language preference management
    function setUserLanguage(langCode) {
        localStorage.setItem("userLanguagePreference", langCode);
        // Navigate to the language page
        window.location.href = `/${langCode}`;
    }

    function setSystemLanguage() {
        localStorage.removeItem("userLanguagePreference");
        // Close the dropdown
        const dropdown = document.querySelector(".language-dropdown");
        if (dropdown) {
            dropdown.classList.add("hidden");
        }
        // Detect browser language and redirect
        const browserLang = getBrowserLanguage();
        window.location.href = `/${browserLang}`;
    }

    function getBrowserLanguage() {
        const supportedLanguages = ["en", "de", "it"];
        const browserLang = navigator.language || navigator.languages[0];
        const langCode = browserLang.split("-")[0].toLowerCase();
        return supportedLanguages.includes(langCode) ? langCode : "en";
    }

    // Toggle dropdown functionality
    document.addEventListener("DOMContentLoaded", function () {
        const button = document.getElementById("language-menu-button");
        const dropdown = document.querySelector(".language-dropdown");
        const languageDisplay = document.getElementById("language-display");

        // Update display based on user preference
        function updateLanguageDisplay() {
            const userPreference = localStorage.getItem(
                "userLanguagePreference",
            );
            if (!userPreference) {
                // Show "System" when using auto-detection
                if (languageDisplay) {
                    languageDisplay.textContent = "System";
                }
            }
        }

        // Initial update
        updateLanguageDisplay();

        if (button && dropdown) {
            button.addEventListener("click", function () {
                dropdown.classList.toggle("hidden");
            });

            // Close dropdown when clicking outside
            document.addEventListener("click", function (event) {
                const target = event.target as Element;
                if (!button.contains(target) && !dropdown.contains(target)) {
                    dropdown.classList.add("hidden");
                }
            });
        }
    });

    // Make functions globally available
    (window as any).setUserLanguage = setUserLanguage;
    (window as any).setSystemLanguage = setSystemLanguage;
    (window as any).getBrowserLanguage = getBrowserLanguage;
</script>

<style>
    .language-switcher {
        z-index: 50;
    }
</style>
