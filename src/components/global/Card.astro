---
// Reusable Card component
export interface Props {
    // Content
    title: string;
    description: string;
    icon?: string;
    features?: string[];
    linkText?: string;
    linkUrl?: string;

    // Styling
    theme?: string;
    iconColor?: string;
    customClasses?: string;
    centerContent?: boolean;
}

const {
    title,
    description,
    icon,
    features,
    linkText,
    linkUrl,
    theme = "dark",
    iconColor,
    customClasses = "",
    centerContent = true,
} = Astro.props;

// Theme-based styling
const cardClasses =
    theme === "dark"
        ? "bg-slate-800 text-white"
        : "bg-white text-gray-800 shadow-lg hover:shadow-xl";

const titleClasses = theme === "dark" ? "text-white" : "text-gray-800";

const descriptionClasses = theme === "dark" ? "text-gray-300" : "text-gray-600";

const defaultIconColor = theme === "dark" ? "text-blue-400" : "text-blue-600";

const finalIconColor = iconColor || defaultIconColor;

const alignmentClasses = centerContent
    ? "text-center items-center"
    : "text-left items-start";
---

<div
    class={`p-6 rounded-lg flex flex-col ${alignmentClasses} ${cardClasses} transition-shadow duration-300 ${customClasses}`}
>
    {
        icon && (
            <span
                class={`material-icons ${finalIconColor} text-4xl mb-4 block`}
            >
                {icon}
            </span>
        )
    }

    <h3 class={`text-xl font-semibold ${titleClasses} mb-2`}>
        {title}
    </h3>

    <p class={`${descriptionClasses} mb-4 flex-grow`}>
        {description}
    </p>

    {
        features && features.length > 0 && (
            <ul class={`text-sm ${descriptionClasses} mb-4`}>
                {features.map((feature) => (
                    <li class="flex items-center mb-1">
                        <span class={`${finalIconColor} mr-2`}>•</span>
                        {feature}
                    </li>
                ))}
            </ul>
        )
    }

    {
        linkText && linkUrl && (
            <a
                href={linkUrl}
                class={
                    theme === "dark"
                        ? "text-blue-400 hover:text-blue-300"
                        : "mt-3 px-4 py-1.5 bg-blue-600 text-white rounded-full hover:bg-blue-700 transition-colors duration-300 text-sm font-medium inline-flex items-center"
                }
            >
                {linkText}
                {theme === "light" && (
                    <span class="material-icons ml-1 text-xs">
                        arrow_forward
                    </span>
                )}
                {theme === "dark" && " →"}
            </a>
        )
    }
</div>
