---
// Enhanced Content-driven page template
import Layout from "../layouts/Layout.astro";
import { getCollection, getEntry } from "astro:content";

// Import all available section components
import HeroSection from "../components/home/HeroSection.astro";
import AboutSection from "../components/home/AboutSection.astro";
import ServicesSection from "../components/home/ServicesSection.astro";
import ContactSection from "../components/home/ContactSection.astro";

export interface Props {
    pageId?: string;
    language?: string;
    environment?: string;
}

// Get URL parameters
const url = new URL(Astro.request.url);
const language = url.searchParams.get("lang") || "en";
const environment = import.meta.env.MODE || "production";

// Get available languages
let availableLanguages = [
    { code: "en", name: "English", flag: "ðŸ‡ºðŸ‡¸" },
    { code: "it", name: "Italiano", flag: "ðŸ‡®ðŸ‡¹" },
    { code: "de", name: "Deutsch", flag: "ðŸ‡©ðŸ‡ª" },
];

try {
    const languages = await getCollection("languages");
    availableLanguages = languages.map((lang) => ({
        code: lang.data.code,
        name: lang.data.name,
        flag: lang.data.flag,
    }));
} catch (error) {
    console.warn("Languages collection not available, using defaults");
}

// Get sections
let sections = [];
try {
    const allSections = await getCollection("sections");
    sections = allSections
        .filter((section) => section.data.metadata?.visible !== false)
        .sort(
            (a, b) =>
                (a.data.metadata?.order || 999) -
                (b.data.metadata?.order || 999),
        )
        .map((section) => ({
            id: section.id,
            ...section.data,
        }));
} catch (error) {
    console.warn("Sections collection not available");
}

// Component mapping
const componentMap = {
    hero: HeroSection,
    about: AboutSection,
    services: ServicesSection,
    contact: ContactSection,
};
---

<Layout title="EvolverAI - AI Solutions">
    <!-- Language Switcher -->
    <div class="fixed top-4 right-4 z-50">
        <div class="bg-white rounded-lg shadow-lg p-2">
            <select
                onchange="window.location.href = '?lang=' + this.value"
                class="border-none bg-transparent"
            >
                {
                    availableLanguages.map((lang) => (
                        <option
                            value={lang.code}
                            selected={language === lang.code}
                        >
                            {lang.flag} {lang.name}
                        </option>
                    ))
                }
            </select>
        </div>
    </div>

    <main>
        <!-- About Section -->
        <AboutSection language={language} environment={environment} />

        <!-- Hero Section -->
        <HeroSection language={language} environment={environment} />

        <!-- Services Section -->
        <ServicesSection language={language} environment={environment} />
    </main>

    <!-- Development helper -->
    {
        import.meta.env.DEV && (
            <div class="fixed bottom-4 left-4 bg-black bg-opacity-75 text-white p-4 rounded text-xs max-w-md">
                <details>
                    <summary class="cursor-pointer font-semibold mb-2">
                        Page Debug Info
                    </summary>
                    <div class="space-y-2">
                        <p>
                            <strong>Language:</strong> {language}
                        </p>
                        <p>
                            <strong>Environment:</strong> {environment}
                        </p>
                        <p>
                            <strong>Sections:</strong> {sections.length}
                        </p>
                        <p>
                            <strong>Available Languages:</strong>{" "}
                            {availableLanguages.map((l) => l.code).join(", ")}
                        </p>
                    </div>
                </details>
            </div>
        )
    }
</Layout>

<style>
    /* Smooth scrolling for anchor links */
    html {
        scroll-behavior: smooth;
    }

    /* Section transitions */
    section {
        transition: opacity 0.3s ease-in-out;
    }
</style>
